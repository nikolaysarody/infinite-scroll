{"version":3,"file":"static/js/966.1ee3d040.chunk.js","mappings":"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","sources":["entities/Post/api/postApi.ts","entities/Post/ui/PostItem/PostItem.tsx","entities/Post/ui/PostList/PostList.tsx","entities/Post/ui/PostDetails/PostDetails.tsx","pages/PostDetailsPage/ui/PostDetailsPage.tsx","features/UI/model/selectors/ui.ts","shared/lib/hooks/useInfiniteScroll/useInfiniteScroll.ts","widgets/Page/ui/Page/Page.tsx","shared/lib/hooks/useAppDispatch/useAppDispatch.ts","shared/lib/hooks/useInitialEffect/useInitialEffect.ts","shared/lib/hooks/useThrottle/useThrottle.ts"],"sourcesContent":["import { Post } from 'src/entities/Post/model/types/types'\r\nimport { rtkApi } from 'src/shared/api/rtkApi'\r\n\r\nconst postApi = rtkApi.injectEndpoints({\r\n    endpoints: (builder) => ({\r\n        fetchAllPosts: builder.query<Post[], { limit: number, start: number }>({\r\n            query: ({ limit = 5, start = 0 }) => ({\r\n                url: '/posts',\r\n                params:\r\n                    {\r\n                        _limit: limit,\r\n                        _start: start,\r\n                    },\r\n            }),\r\n        }),\r\n        fetchPostById: builder.query<Post, number>({\r\n            query: (id: number = 1) => ({\r\n                url: `/posts/${id}`,\r\n            }),\r\n        }),\r\n    }),\r\n})\r\n\r\nexport const useFetchAllPosts = postApi.useFetchAllPostsQuery\r\nexport const useFetchPostById = postApi.useFetchPostByIdQuery\r\n","import { useNavigate } from 'react-router-dom'\r\nimport { Post } from 'src/entities/Post/model/types/types'\r\nimport './PostItem.scss'\r\n\r\ninterface PostItemProps {\r\n    post: Post\r\n}\r\n\r\nexport const PostItem = ({ post }: PostItemProps) => {\r\n    const navigate = useNavigate()\r\n    return (\r\n        <div className='post-item'>\r\n            <div>\r\n                {`№ ${post.id}`}\r\n            </div>\r\n            <div className='post-item__title'>\r\n                {`Заголовок: ${post.title}`}\r\n            </div>\r\n            <div className='post-item__body'>\r\n                {`Описание: ${post.body}`}\r\n            </div>\r\n            <button\r\n                type='button'\r\n                onClick={() => navigate(`/post/${post.id}`)}\r\n            >\r\n                Подробнее\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import './PostList.scss'\r\nimport { Post } from 'src/entities/Post/model/types/types'\r\nimport { PostItem } from 'src/entities/Post/ui/PostItem/PostItem'\r\n\r\ninterface PostListProps {\r\n    posts: Post[]\r\n    isLoading: boolean\r\n}\r\n\r\nexport const PostList = ({ posts, isLoading }: PostListProps) => {\r\n    return (\r\n        <>\r\n            <div className='post-list'>\r\n                {posts?.map((post) => (\r\n                    <PostItem\r\n                        key={post.id}\r\n                        post={post}\r\n                    />\r\n                ))}\r\n            </div>\r\n            {isLoading && <div>Загрузка данных...</div>}\r\n        </>\r\n    )\r\n}\r\n","import './PostDetails.scss'\r\nimport { useFetchPostById } from 'src/entities/Post/api/postApi'\r\nimport { PageLoader } from 'src/widgets/PageLoader'\r\n\r\ninterface PostDetailsProps {\r\n    id?: number\r\n}\r\n\r\nexport const PostDetails = (props: PostDetailsProps) => {\r\n    const {\r\n        id = 0,\r\n    } = props\r\n\r\n    const {\r\n        data: post,\r\n        isLoading,\r\n    } = useFetchPostById(id)\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <PageLoader />\r\n            ) : (\r\n                <div className='post-details'>\r\n                    <div>\r\n                        №\r\n                        {post?.id}\r\n                    </div>\r\n                    <div className='post-details__title'>\r\n                        Заголовок:\r\n                        {' '}\r\n                        {post?.title}\r\n                    </div>\r\n                    <div className='post-details__body'>\r\n                        Описание:\r\n                        {' '}\r\n                        {post?.body}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import { useParams } from 'react-router-dom'\nimport { PostDetails } from 'src/entities/Post'\nimport { Page } from 'src/widgets/Page'\nimport './PostDetailsPage.scss'\n\nconst PostDetailsPage = () => {\n    const { id } = useParams<{ id: string }>()\n\n    return (\n        <Page className='post-details-page'>\n            <PostDetails id={Number(id)} />\n        </Page>\n    )\n}\n\nexport default PostDetailsPage\n","import { createSelector } from '@reduxjs/toolkit'\nimport { RootState } from 'src/app/providers/StoreProvider'\n\nexport const getUIScroll = (state: RootState) => state.ui.scroll\n\nexport const getUIScrollByPath = createSelector(\n    getUIScroll,\n    (state: RootState, path: string) => path,\n    (scroll, path) => scroll[path] || 0,\n)\n","import { MutableRefObject, useEffect, useRef } from 'react'\n\nexport interface UseInfiniteScrollOptions {\n    callback?: () => void\n    triggerRef: MutableRefObject<HTMLElement>\n    wrapperRef?: MutableRefObject<HTMLElement>\n}\n\nexport function useInfiniteScroll({\n    callback,\n    wrapperRef,\n    triggerRef,\n}: UseInfiniteScrollOptions) {\n    const observer = useRef<IntersectionObserver | null>(null)\n\n    useEffect(() => {\n        const wrapperElement = wrapperRef?.current || null\n        const triggerElement = triggerRef.current\n\n        if (callback) {\n            const options = {\n                root: wrapperElement,\n                rootMargin: '0px',\n                threshold: 1.0,\n            }\n\n            observer.current = new IntersectionObserver(([entry]) => {\n                if (entry.isIntersecting) {\n                    callback()\n                }\n            }, options)\n\n            observer.current.observe(triggerElement)\n        }\n\n        return () => {\n            if (observer.current && triggerElement) {\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n                observer.current.unobserve(triggerElement)\n            }\n        }\n    }, [callback, triggerRef, wrapperRef])\n}\n","import clsx from 'clsx'\nimport { memo, MutableRefObject, ReactNode, UIEvent, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { RootState } from 'src/app/providers/StoreProvider'\nimport { getUIScrollByPath, uiActions } from 'src/features/UI'\nimport { useAppDispatch } from 'src/shared/lib/hooks/useAppDispatch/useAppDispatch'\nimport { useInfiniteScroll } from 'src/shared/lib/hooks/useInfiniteScroll/useInfiniteScroll'\nimport { useInitialEffect } from 'src/shared/lib/hooks/useInitialEffect/useInitialEffect'\nimport { useThrottle } from 'src/shared/lib/hooks/useThrottle/useThrottle'\nimport './Page.scss'\n\ninterface PageProps {\n    className?: string\n    children: ReactNode\n    onScrollEnd?: () => void\n    onScrollStart?: () => void\n}\n\nexport const Page = memo((props: PageProps) => {\n    const {\n        className,\n        children,\n        onScrollEnd,\n        onScrollStart,\n    } = props\n    const wrapperRef = useRef() as MutableRefObject<HTMLDivElement>\n    const triggerStartRef = useRef() as MutableRefObject<HTMLDivElement>\n    const triggerEndRef = useRef() as MutableRefObject<HTMLDivElement>\n    const dispatch = useAppDispatch()\n    const { pathname } = useLocation()\n    const scrollPosition = useSelector((state: RootState) => getUIScrollByPath(state, pathname))\n\n    useInfiniteScroll({\n        triggerRef: triggerStartRef,\n        wrapperRef,\n        callback: onScrollStart,\n    })\n\n    useInfiniteScroll({\n        triggerRef: triggerEndRef,\n        wrapperRef,\n        callback: onScrollEnd,\n    })\n\n    useInitialEffect(() => {\n        wrapperRef.current.scrollTop = scrollPosition\n    })\n\n    const onScroll = useThrottle((e: UIEvent<HTMLDivElement>) => {\n        dispatch(\n            uiActions.setScrollPosition({\n                position: e.currentTarget.scrollTop,\n                path: pathname,\n            }),\n        )\n    }, 500)\n\n    return (\n        <main\n            ref={wrapperRef}\n            className={clsx('page', className)}\n            onScroll={onScroll}\n        >\n            {onScrollStart ? (\n                <div className='page__trigger' ref={triggerStartRef} />\n            ) : null}\n            {children}\n            {onScrollEnd ? (\n                <div className='page__trigger' ref={triggerEndRef} />\n            ) : null}\n        </main>\n    )\n})\n","import { useDispatch } from 'react-redux'\nimport { AppDispatch } from 'src/app/providers/StoreProvider'\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n","import { useEffect } from 'react'\n\nexport function useInitialEffect(callback: () => void) {\n    useEffect(() => {\n        callback()\n        // eslint-disable-next-line\n    }, [])\n}\n","import { useCallback, useRef } from 'react'\n\nexport function useThrottle(callback: (...args: any[]) => void, delay: number) {\n    const throttleRef = useRef(false)\n\n    return useCallback(\n        (...args: any[]) => {\n            if (!throttleRef.current) {\n                callback(...args)\n                throttleRef.current = true\n\n                setTimeout(() => {\n                    throttleRef.current = false\n                }, delay)\n            }\n        },\n        [callback, delay],\n    )\n}\n"],"names":["postApi","rtkApi","injectEndpoints","endpoints","builder","fetchAllPosts","query","_ref","limit","start","url","params","_limit","_start","fetchPostById","concat","arguments","length","undefined","useFetchAllPosts","useFetchAllPostsQuery","useFetchPostById","useFetchPostByIdQuery","PostItem","post","navigate","useNavigate","_jsxs","className","children","_jsx","id","title","body","type","onClick","PostList","posts","isLoading","_Fragment","map","PostDetails","props","data","PageLoader","PostDetailsPage","useParams","Page","Number","getUIScrollByPath","createSelector","state","ui","scroll","path","useInfiniteScroll","callback","wrapperRef","triggerRef","observer","useRef","useEffect","wrapperElement","current","triggerElement","options","root","rootMargin","threshold","IntersectionObserver","_ref2","entry","isIntersecting","observe","unobserve","memo","onScrollEnd","onScrollStart","triggerStartRef","triggerEndRef","dispatch","useDispatch","pathname","useLocation","scrollPosition","useSelector","scrollTop","onScroll","delay","throttleRef","useCallback","setTimeout","useThrottle","e","uiActions","setScrollPosition","position","currentTarget","ref","clsx"],"sourceRoot":""}